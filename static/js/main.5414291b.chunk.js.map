{"version":3,"sources":["components/Calculator/Calculator.module.scss","components/Calculator/ImperialForm/ImperialForm.module.css","App.module.scss","components/Calculator/MetricForm/MetricForm.module.scss","store/Store.js","components/Calculator/MetricForm/MetricFrom.js","components/Calculator/ImperialForm/ImperialForm.js","components/Calculator/formulas/formulas.js","components/Calculator/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","IMPERIAL","METRIC","ModeContext","React","createContext","UserContext","Store","props","useState","currentMode","setCurrentMode","undefined","height","setHeight","weight","setWeight","isReady","setIsReady","bmi","setBmi","Provider","value","children","MetricForm","class","for","name","type","id","placeholder","ms","onChange","e","setState","target","className","styles","measurementSmall","measurement","ImperialForm","useContext","feetHeight","setFeetHeight","toSet","parseInt","Math","floor","calculateMetric","toFixed","calculateImperial","Calculator","useEffect","container","card","cardHeader","checked","bmiContainer","disabled","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yGACAA,EAAOC,QAAU,CAAC,UAAY,8BAA8B,WAAa,+BAA+B,aAAe,iCAAiC,KAAO,2B,gBCA/JD,EAAOC,QAAU,CAAC,iBAAmB,yC,kBCArCD,EAAOC,QAAU,CAAC,UAAY,yB,gBCA9BD,EAAOC,QAAU,CAAC,iBAAmB,uC,yLCCxBC,EAAW,WACXC,EAAS,SAETC,EAAcC,IAAMC,cAAcH,GAClCI,EAAcF,IAAMC,cAAc,IA6BhCE,EA3BD,SAAAC,GAAU,IAAD,EACiBC,mBAASP,GAD1B,mBACdQ,EADc,KACDC,EADC,OAEOF,wBAASG,GAFhB,mBAEdC,EAFc,KAENC,EAFM,OAGOL,wBAASG,GAHhB,mBAGdG,EAHc,KAGNC,EAHM,OAISP,oBAAS,GAJlB,mBAIdQ,EAJc,KAILC,EAJK,OAKCT,wBAASG,GALV,mBAKdO,EALc,KAKTC,EALS,KAOrB,OACE,kBAACjB,EAAYkB,SAAb,CAAsBC,MAAO,CAACZ,EAAaC,IACzC,kBAACL,EAAYe,SAAb,CACEC,MAAO,CACLT,EACAE,EACAE,EACAE,EACAL,EACAE,EACAE,EACAE,IAGDZ,EAAMe,Y,gBCKAC,EA/BI,SAAAhB,GACjB,OACE,6BACE,0BAAMiB,MAAM,mBACV,yBAAKA,MAAM,cACT,yBAAKA,MAAM,UACT,2BAAOA,MAAM,aAAaC,IAAI,mBAC3BlB,EAAMmB,OAGX,yBAAKF,MAAM,SACT,2BACEA,MAAM,aACNG,KAAK,OACLC,GAAG,kBACHC,YAAatB,EAAMuB,GACnBT,MAAOd,EAAMc,MACbU,SAAU,SAAAC,GAAC,OAAIzB,EAAM0B,SAASD,EAAEE,OAAOb,WAG3C,yBAAKG,MAAM,SACT,wBAAIW,UAAS,UAAKC,IAAOC,iBAAZ,UACV9B,EAAM+B,kB,gBCiENC,EAtFM,WAAO,IAAD,EAUrBpC,IAAMqC,WAAWnC,GAVI,mBAEvBO,EAFuB,KAMvBC,GANuB,qBAOvBE,EAPuB,kBAYWZ,IAAMK,cAASG,IAZ1B,mBAYlB8B,EAZkB,KAYNC,EAZM,KAczB,OACE,6BACE,0BAAMlB,MAAM,mBACV,yBAAKA,MAAM,cACT,yBAAKA,MAAM,UACT,2BAAOA,MAAM,aAAaC,IAAI,mBAA9B,WAIF,yBAAKD,MAAM,SACT,2BACEA,MAAM,aACNG,KAAK,OACLC,GAAG,kBACHC,YAAY,MACZE,SAAU,SAAAC,GACR,IAAIW,EAAmC,GAA3BC,SAASZ,EAAEE,OAAOb,OAC9BR,EAAU8B,GACVD,EAAcC,IAEhBtB,MAAOT,EAASiC,KAAKC,MAAMlC,EAAS,IAAM,MAG9C,yBAAKY,MAAM,SACT,wBAAIW,UAAS,UAAKC,IAAOC,iBAAZ,UAAb,UAIJ,yBAAKF,UAAU,cACb,yBAAKA,UAAU,UACf,yBAAKX,MAAM,SACT,2BACEA,MAAM,aACNG,KAAK,OACLC,GAAG,kBACHC,YAAW,MACXE,SAAU,SAAAC,GACRnB,EAAU4B,EAAaG,SAASZ,EAAEE,OAAOb,YAI/C,yBAAKG,MAAM,SACT,wBAAIW,UAAS,UAAKC,IAAOC,iBAAZ,UAAb,YAIJ,yBAAKb,MAAM,cACT,yBAAKA,MAAM,UACT,2BAAOA,MAAM,aAAaC,IAAI,mBAA9B,WAIF,yBAAKD,MAAM,SACT,2BACEA,MAAM,aACNG,KAAK,OACLC,GAAG,kBACHC,YAAY,OACZE,SAAU,SAAAC,GACRjB,EAAU6B,SAASZ,EAAEE,OAAOb,YAIlC,yBAAKG,MAAM,SACT,wBAAIW,UAAS,UAAKC,IAAOC,iBAAZ,UAAb,eClFCU,EAAkB,SAACnC,EAAQE,GACtC,OAASA,EAASF,EAASA,EAAU,KAAOoC,QAAQ,IAGzCC,EAAoB,SAACrC,EAAQE,GACxC,OAAkB,IAATA,GAAiBF,EAASA,IAASoC,QAAQ,ICmHvCE,EAhHI,WAAO,IAAD,EACeV,qBAAWtC,GAD1B,mBAChBO,EADgB,KACHC,EADG,OAWnB8B,qBAAWnC,GAXQ,mBAGrBO,EAHqB,KAIrBE,EAJqB,KAKrBE,EALqB,KAMrBE,EANqB,KAOrBL,EAPqB,KAQrBE,EARqB,KASrBE,EATqB,KAUrBE,EAVqB,KA6BvB,OARAhB,IAAMgD,WAAU,WAEZlC,EADEL,EAAS,GAAKE,EAAS,GAAKF,EAAS,KAAQE,EAAS,OAKzD,CAACF,EAAQE,EAAQG,EAAYD,IAG9B,yBAAKmB,UAAWC,IAAOgB,WACrB,yBAAK5B,MAAK,eAAUY,IAAOiB,OACzB,yBAAK7B,MAAK,sBAAiBY,IAAOkB,aAChC,yBAAK9B,MAAM,iBAAX,kBACA,yBAAKA,MAAM,cACT,2BAAOA,MAAM,0BACX,2BACEG,KAAK,QACLD,KAAK,SACL6B,QAAS9C,IAAgBR,EACzB8B,SAAU,WACRrB,EAAeT,GACfY,OAAUF,GACVI,OAAUJ,MAGd,uBAAGa,MAAM,cAXX,WAaA,2BAAOA,MAAM,0BACX,2BACEG,KAAK,QACLD,KAAK,SACL6B,QAAS9C,IAAgBT,EACzB+B,SAAU,WACRrB,EAAeV,GACfa,OAAUF,GACVI,OAAUJ,MAGd,uBAAGa,MAAM,cAXX,eAgBJ,yBAAKA,MAAM,aACRf,IAAgBR,EACf,0BAAMuB,MAAM,mBACV,kBAAC,EAAD,CACEE,KAAK,SACLI,GAAG,KACHQ,YAAY,cACZL,SAAUpB,EACVQ,MAAOT,IAET,kBAAC,EAAD,CACEc,KAAK,SACLI,GAAG,KACHQ,YAAY,YACZL,SAAUlB,EACVM,MAAOP,KAIX,kBAAC,EAAD,OAIJ,yBAAKU,MAAM,eACT,yBAAKW,UAAU,aACb,yBAAKA,UAAS,UAAKC,IAAOoB,eACxB,4BACEhC,MAAM,kBACNiC,UAAWzC,EACX0C,QAAS,WA/EjBjD,IAAgBR,EAClBkB,EAAO4B,EAAgBnC,EAAQE,IACtBL,IAAgBT,GACzBmB,EAAO8B,EAAkBrC,EAAQE,MAyEzB,aAQA,mCACO,IACL,8BACE,gCAASI,WC/FZyC,MARf,WACE,OACE,yBAAKxB,UAAWC,IAAOgB,WACrB,kBAAC,EAAD,Q,kBCGcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OACP,kBAAC,EAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5414291b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Calculator_container__11dQg\",\"cardHeader\":\"Calculator_cardHeader__3QxyU\",\"bmiContainer\":\"Calculator_bmiContainer__2as-W\",\"card\":\"Calculator_card__ZjqT9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"measurementSmall\":\"ImperialForm_measurementSmall__3nbA3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__eSJ6i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"measurementSmall\":\"MetricForm_measurementSmall__1H_jT\"};","import React, { useState } from 'react';\n\nexport const IMPERIAL = 'IMPERIAL';\nexport const METRIC = 'METRIC';\n\nexport const ModeContext = React.createContext(METRIC);\nexport const UserContext = React.createContext([]);\n\nconst Store = props => {\n  const [currentMode, setCurrentMode] = useState(METRIC);\n  const [height, setHeight] = useState(undefined);\n  const [weight, setWeight] = useState(undefined);\n  const [isReady, setIsReady] = useState(false);\n  const [bmi, setBmi] = useState(undefined);\n\n  return (\n    <ModeContext.Provider value={[currentMode, setCurrentMode]}>\n      <UserContext.Provider\n        value={[\n          height,\n          weight,\n          isReady,\n          bmi,\n          setHeight,\n          setWeight,\n          setIsReady,\n          setBmi\n        ]}\n      >\n        {props.children}\n      </UserContext.Provider>\n    </ModeContext.Provider>\n  );\n};\n\nexport default Store;\n","import React from 'react';\nimport styles from './MetricForm.module.scss';\n\nconst MetricForm = props => {\n  return (\n    <div>\n      <form class='form-horizontal'>\n        <div class='form-group'>\n          <div class='col-3 '>\n            <label class='form-label' for='input-example-1'>\n              {props.name}\n            </label>\n          </div>\n          <div class='col-2'>\n            <input\n              class='form-input'\n              type='text'\n              id='input-example-1'\n              placeholder={props.ms}\n              value={props.value}\n              onChange={e => props.setState(e.target.value)}\n            />\n          </div>\n          <div class='col-2'>\n            <h4 className={`${styles.measurementSmall} mx-2`}>\n              {props.measurement}\n            </h4>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default MetricForm;\n","import React from 'react';\nimport styles from './ImperialForm.module.css';\nimport { UserContext } from '../../../store/Store';\n\nconst ImperialForm = () => {\n  const [\n    height,\n    weight,\n    isReady,\n    bmi,\n    setHeight,\n    setWeight,\n    setIsReady,\n    setBmi\n  ] = React.useContext(UserContext);\n\n  const [feetHeight, setFeetHeight] = React.useState(undefined);\n\n  return (\n    <div>\n      <form class='form-horizontal'>\n        <div class='form-group'>\n          <div class='col-3 '>\n            <label class='form-label' for='input-example-1'>\n              Height\n            </label>\n          </div>\n          <div class='col-2'>\n            <input\n              class='form-input'\n              type='text'\n              id='input-example-1'\n              placeholder='ft.'\n              onChange={e => {\n                var toSet = parseInt(e.target.value) * 12;\n                setHeight(toSet);\n                setFeetHeight(toSet);\n              }}\n              value={height ? Math.floor(height / 12) : ''}\n            />\n          </div>\n          <div class='col-2'>\n            <h4 className={`${styles.measurementSmall} mx-2`}>feet</h4>\n          </div>\n        </div>\n\n        <div className='form-group'>\n          <div className='col-3'></div>\n          <div class='col-2'>\n            <input\n              class='form-input'\n              type='text'\n              id='input-example-1'\n              placeholder={`in.`}\n              onChange={e => {\n                setHeight(feetHeight + parseInt(e.target.value));\n              }}\n            />\n          </div>\n          <div class='col-2'>\n            <h4 className={`${styles.measurementSmall} mx-2`}>inches</h4>\n          </div>\n        </div>\n\n        <div class='form-group'>\n          <div class='col-3 '>\n            <label class='form-label' for='input-example-1'>\n              Weight\n            </label>\n          </div>\n          <div class='col-2'>\n            <input\n              class='form-input'\n              type='text'\n              id='input-example-1'\n              placeholder='lbs.'\n              onChange={e => {\n                setWeight(parseInt(e.target.value));\n              }}\n            />\n          </div>\n          <div class='col-2'>\n            <h4 className={`${styles.measurementSmall} mx-2`}>pounds</h4>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default ImperialForm;\n","export const calculateMetric = (height, weight) => {\n  return ((weight / height / height) * 10000).toFixed(2);\n};\n\nexport const calculateImperial = (height, weight) => {\n  return ((weight * 703) / (height * height)).toFixed(2);\n};\n","import React, { useContext } from 'react';\n\nimport styles from './Calculator.module.scss';\nimport { ModeContext, METRIC, IMPERIAL, UserContext } from '../../store/Store';\nimport MetricForm from './MetricForm/MetricFrom';\nimport ImperialForm from './ImperialForm/ImperialForm';\nimport { calculateMetric, calculateImperial } from './formulas/formulas';\n\nconst Calculator = () => {\n  const [currentMode, setCurrentMode] = useContext(ModeContext);\n  const [\n    height,\n    weight,\n    isReady,\n    bmi,\n    setHeight,\n    setWeight,\n    setIsReady,\n    setBmi\n  ] = useContext(UserContext);\n\n  function handleCalculation() {\n    if (currentMode === METRIC) {\n      setBmi(calculateMetric(height, weight));\n    } else if (currentMode === IMPERIAL) {\n      setBmi(calculateImperial(height, weight));\n    }\n  }\n\n  React.useEffect(() => {\n    if (height > 0 && weight > 0 && height < 1000 && weight < 1000) {\n      setIsReady(true);\n    } else {\n      setIsReady(false);\n    }\n  }, [height, weight, setIsReady, isReady]);\n\n  return (\n    <div className={styles.container}>\n      <div class={`card ${styles.card}`}>\n        <div class={`card-header ${styles.cardHeader}`}>\n          <div class='card-title h5'>BMI Calculator</div>\n          <div class='form-group'>\n            <label class='form-radio form-inline'>\n              <input\n                type='radio'\n                name='gender'\n                checked={currentMode === METRIC}\n                onChange={() => {\n                  setCurrentMode(METRIC);\n                  setHeight(undefined);\n                  setWeight(undefined);\n                }}\n              />\n              <i class='form-icon'></i> Metric\n            </label>\n            <label class='form-radio form-inline'>\n              <input\n                type='radio'\n                name='gender'\n                checked={currentMode === IMPERIAL}\n                onChange={() => {\n                  setCurrentMode(IMPERIAL);\n                  setHeight(undefined);\n                  setWeight(undefined);\n                }}\n              />\n              <i class='form-icon'></i> Imperial\n            </label>\n          </div>\n        </div>\n\n        <div class='card-body'>\n          {currentMode === METRIC ? (\n            <form class='form-horizontal'>\n              <MetricForm\n                name='Height'\n                ms='cm'\n                measurement='centimeters'\n                setState={setHeight}\n                value={height}\n              ></MetricForm>\n              <MetricForm\n                name='Weight'\n                ms='kg'\n                measurement='kilograms'\n                setState={setWeight}\n                value={weight}\n              ></MetricForm>\n            </form>\n          ) : (\n            <ImperialForm></ImperialForm>\n          )}\n        </div>\n\n        <div class='card-footer'>\n          <div className='container'>\n            <div className={`${styles.bmiContainer}`}>\n              <button\n                class='btn btn-primary'\n                disabled={!isReady}\n                onClick={() => handleCalculation()}\n              >\n                Calculate\n              </button>\n\n              <h4>\n                BMI:{' '}\n                <span>\n                  <strong>{bmi}</strong>\n                </span>\n              </h4>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Calculator;\n","import React from 'react';\n\nimport styles from './App.module.scss';\n\nimport Calculator from './components/Calculator/Calculator';\n\nfunction App() {\n  return (\n    <div className={styles.container}>\n      <Calculator></Calculator>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport Store from './store/Store';\n\nimport 'spectre.css';\nimport './vendors/icons.css';\nimport './vendors/icons.min.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Store>\n    <App />\n  </Store>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}